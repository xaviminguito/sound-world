---
const anim = {
  old: {
    name: 'bump',
    duration: '0.5s',
    easing: 'ease-in',
    direction: 'reverse',
  },
  new: {
    name: 'bump',
    duration: '0.5s',
    easing: 'ease-in-out',
  },
};

const customTransition = {
  forwards: anim,
  backwards: anim,
};
---
<style>
    .audio-player {
      opacity: 0;
      display: flex;
      justify-content: space-between;
      align-items: center;
      gap: 10px;
      background-color: #c9aa64;
      padding: 0.5rem 1rem;
      color: #fff;
      width: 100%;
      bottom: 0;
      position: relative;

      &.playing {
        opacity: 1;
      }
    }
    .audio-controls {
        display: flex;
        align-items: center;
        gap: 10px;
        flex: 1;
    }
    .progress-bar {
        flex: 1;
        height: 5px;
        background-color: #555;
        border-radius: 3px;
        cursor: pointer;
        position: relative;
        overflow: hidden;
    }
    .progress-bar-fill {
        height: 100%;
        background-color: #ff6600;
        border-radius: 3px;
        width: 0%;
        transition: width 0.1s linear;
    }
    .volume-control {
        display: flex;
        align-items: center;
        gap: 5px;
    }
    .volume-bar {
        width: 100px;
        height: 5px;
        background-color: #555;
        border-radius: 3px;
        cursor: pointer;
        position: relative;
    }
    .volume-bar-fill {
        height: 100%;
        background-color: #ff6600;
        border-radius: 3px;
        width: 100%; /* Initial volume at 100% */
    }
    button {
        background: none;
        border: none;
        color: #fff;
        font-size: 18px;
        cursor: pointer;
    }
    button:disabled {
        cursor: not-allowed;
        color: #555;
    }
</style>

<audio-player class="audio-player" transition-name="player" transition:animate={customTransition}>
    <button id="play-pause" aria-label="Play">►</button>
    <!--<div class="audio-controls">
        <div class="progress-bar" id="progress-bar">
            <div class="progress-bar-fill" id="progress-bar-fill"></div>
        </div>
        <span id="time">0:00</span>
    </div>-->
    <div class="volume-control">
        <button id="mute-toggle" aria-label="Mute">🔊</button>
        <div class="volume-bar" id="volume-bar">
            <div class="volume-bar-fill" id="volume-bar-fill"></div>
        </div>
    </div>
    <audio id="audio" transition:persist></audio>
</audio-player>

<script>
    class AudioPlayer extends HTMLElement {
        constructor() {
            super();

            const audio = this.querySelector('#audio');
            const playPauseButton = this.querySelector('#play-pause');
            //const progressBar = this.querySelector('#progress-bar');
            //const progressBarFill = this.querySelector('#progress-bar-fill');
            //const time = this.querySelector('#time');
            const volumeBar = this.querySelector('#volume-bar');
            const volumeBarFill = this.querySelector('#volume-bar-fill');
            const muteToggle = this.querySelector('#mute-toggle');

// Play/Pause functionality
            playPauseButton.addEventListener('click', () => {
                if (audio.paused) {
                    audio.play();
                    playPauseButton.textContent = '❚❚';
                    this.classList.add('playing');
                } else {
                    audio.pause();
                    playPauseButton.textContent = '►';
                }
            });



// Volume control
            volumeBar.addEventListener('click', (e) => {
                const rect = volumeBar.getBoundingClientRect();
                const clickX = e.clientX - rect.left;
                const width = rect.width;
                const clickPositionPercent = clickX / width;
                audio.volume = clickPositionPercent;
                volumeBarFill.style.width = (clickPositionPercent * 100) + '%';
            });

// Mute/Unmute functionality
            muteToggle.addEventListener('click', () => {
                if (audio.muted) {
                    audio.muted = false;
                    muteToggle.textContent = '🔊';
                    volumeBarFill.style.width = (audio.volume * 100) + '%';
                } else {
                    audio.muted = true;
                    muteToggle.textContent = '🔇';
                    volumeBarFill.style.width = '0%';
                }
            });
        }
    }

    customElements.define('audio-player', AudioPlayer);
</script>
